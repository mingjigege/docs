import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.CeWJkJk4.js";const g=JSON.parse('{"title":"占位符","description":"","frontmatter":{},"headers":[],"relativePath":"dev/placeholder.md","filePath":"dev/placeholder.md"}'),e={name:"dev/placeholder.md"},t=n(`<h1 id="占位符" tabindex="-1">占位符 <a class="header-anchor" href="#占位符" aria-label="Permalink to &quot;占位符&quot;">​</a></h1><p>SparkBridge有独立的正则表达式系统和占位符系统，占位符可以在正则表达式执行的时候实现特定变量的替换。</p><p>具体详见：<a href="/docs/user/regex.html">正则表达式</a></p><p>这一章节，我将向你讲述如何自定义一个占位符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> regPlaceHolder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spark.Cmd.regPlaceHolder;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spark.Cmd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">regPlaceHolder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;EXAMPLE_NAME&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;测试插件&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spark.Cmd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">regPlaceHolder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;EXAMPLE_NAME2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;测试插件2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>正则表达式有两个触发环境，一种是服务器玩家发言，一种是群聊玩家发言。</p><p>在群聊中触发的时候，传入的是群聊消息类，而在服务器中触发的时候，传入的是玩家对象与发言内容。</p>`,7),l=[t];function p(h,k,r,E,d,c){return a(),i("div",null,l)}const y=s(e,[["render",p]]);export{g as __pageData,y as default};
