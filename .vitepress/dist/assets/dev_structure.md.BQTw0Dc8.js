import{_ as s,c as a,o as i,a4 as t}from"./chunks/framework.CeWJkJk4.js";const u=JSON.parse('{"title":"文件结构","description":"","frontmatter":{},"headers":[],"relativePath":"dev/structure.md","filePath":"dev/structure.md"}'),n={name:"dev/structure.md"},e=t(`<h1 id="文件结构" tabindex="-1">文件结构 <a class="header-anchor" href="#文件结构" aria-label="Permalink to &quot;文件结构&quot;">​</a></h1><p>从本章开始，我将带您一起制作一个插件，从实际动手来了解SparkBridge的插件编写流程</p><p>SparkBridge的插件结构并不复杂，需要有一个自述文件，和一个主程序入口。</p><h2 id="文件结构-1" tabindex="-1">文件结构 <a class="header-anchor" href="#文件结构-1" aria-label="Permalink to &quot;文件结构&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─index.js &lt;-- 你的插件的主程序</span></span>
<span class="line"><span>└─spark.json  &lt;-- 你的插件的自述文件</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>如果您的插件引用了第三方库，请在打包时将node_modules一并打包到插件压缩包内</p></div><h2 id="自述文件" tabindex="-1">自述文件 <a class="header-anchor" href="#自述文件" aria-label="Permalink to &quot;自述文件&quot;">​</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这是插件的名字，将会在被bds加载时显示</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Spark酱&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//此处签上你的大名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//写上版本号</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;desc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这是一个示例插件&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//插件的自述，不过这并不会显示在bds的控制台中</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;load&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //是否启用此插件，保持默认即可</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>自述文件中不应出现注释，在这里写注释是为了让您了解每个项的含义</p></div>`,9),l=[e];function p(h,k,r,d,o,c){return i(),a("div",null,l)}const g=s(n,[["render",p]]);export{u as __pageData,g as default};
