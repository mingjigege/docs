import{_ as s,c as a,o as e,a4 as i}from"./chunks/framework.CeWJkJk4.js";const E=JSON.parse('{"title":"Spark类","description":"","frontmatter":{},"headers":[],"relativePath":"dev/spark.md","filePath":"dev/spark.md"}'),t={name:"dev/spark.md"},l=i(`<h1 id="spark类" tabindex="-1">Spark类 <a class="header-anchor" href="#spark类" aria-label="Permalink to &quot;Spark类&quot;">​</a></h1><p>Spark类是SparkBridge的一个全局变量，储存着SparkBridge的绝大部分方法与元素。</p><h2 id="qclient" tabindex="-1">QClient <a class="header-anchor" href="#qclient" aria-label="Permalink to &quot;QClient&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spark.QClient</span></span></code></pre></div><p>QClient存放着QQ客户端实例，是一个websocket兼容层，可以在<a href="/docs/dev/qc_api.html">CQ客户端API</a>页面找到所有方法</p><h2 id="getlogger" tabindex="-1">getLogger <a class="header-anchor" href="#getlogger" aria-label="Permalink to &quot;getLogger&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;plugin_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>getLogger方法返回一个Logger实例，详见<a href="/docs/dev/logger.html">Log记录器</a></p><h2 id="getfilehelper" tabindex="-1">getFileHelper <a class="header-anchor" href="#getfilehelper" aria-label="Permalink to &quot;getFileHelper&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFileHelper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dir_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>getFileHelper返回文件帮助类，详见<a href="/docs/dev/file.html">文件系统</a></p><h2 id="setownproperty" tabindex="-1">setOwnProperty <a class="header-anchor" href="#setownproperty" aria-label="Permalink to &quot;setOwnProperty&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFileHelper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;plugin_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{})</span></span></code></pre></div><p>setOwnProperty可以在spark上挂载插件自定义的属性，使得插件互相联动成为可能。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setOwnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayhello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spark.example.sayhello </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sayhello;</span></span></code></pre></div><p>这样别的插件就可以直接调用<code>spark.example.sayhello</code>了</p><p>以下是各官方插件在spark上挂载的自定义属性</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">备注</th></tr></thead><tbody><tr><td style="text-align:center;">spark.VERSION</td><td style="text-align:center;">sparkbridge的版本</td></tr><tr><td style="text-align:center;">spark.onBDS</td><td style="text-align:center;">sparkbridge是否作为BDS的插件运行</td></tr><tr><td style="text-align:center;">spark.mc.config</td><td style="text-align:center;">插件<code>mc</code>的配置文件</td></tr></tbody></table>`,18),n=[l];function p(h,r,k,d,o,g){return e(),a("div",null,n)}const y=s(t,[["render",p]]);export{E as __pageData,y as default};
