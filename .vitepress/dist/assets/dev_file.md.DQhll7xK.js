import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.CeWJkJk4.js";const g=JSON.parse('{"title":"文件系统","description":"","frontmatter":{},"headers":[],"relativePath":"dev/file.md","filePath":"dev/file.md"}'),e={name:"dev/file.md"},l=n(`<h1 id="文件系统" tabindex="-1">文件系统 <a class="header-anchor" href="#文件系统" aria-label="Permalink to &quot;文件系统&quot;">​</a></h1><p>如你所见，在沙箱模式和BDS模式中，SparkBridge的文件被储存在了不同的地方。</p><p>插件要适配不同的模式，就需要有统一管理的文件操作类。</p><p>这一章，我将向您介绍SparkBridge的配置文件管理类。</p><h2 id="文件管理初始化与读取" tabindex="-1">文件管理初始化与读取 <a class="header-anchor" href="#文件管理初始化与读取" aria-label="Permalink to &quot;文件管理初始化与读取&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFileHelper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;config.josn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reply:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> local_config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;config.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>这里我们申请到了<code>example</code>文件夹的使用权限，且初始化了<code>config.json</code>作为我们的配置文件，并提供了默认的模板。</p><p>所有从configFile初始化的文件，都会存储在<code>example</code>文件夹中。</p><p>SparkBridge会使用这套模板作为初始配置文件进行写入。初始化时如果文件已经存在，不会覆盖。</p><p>在这个步骤SparkBridge不会提供解析好的json文件，需要开发者自行解析。因为json与josn5的配置文件互不通用，SparkBridge不知道目标文件使用什么格式储存。</p><h2 id="读取二进制流" tabindex="-1">读取二进制流 <a class="header-anchor" href="#读取二进制流" aria-label="Permalink to &quot;读取二进制流&quot;">​</a></h2><p>如果我们想读取二进制文件，该怎么办呢。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>这样我们就读取了一张名为<code>b.jpg</code>的文件</p><h2 id="保存" tabindex="-1">保存 <a class="header-anchor" href="#保存" aria-label="Permalink to &quot;保存&quot;">​</a></h2><p>在我们需要更新我们的文件的时候应该如何操作呢</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,local_config);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果您想使用json5反序列化</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> json5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;json5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,local_config,json5);</span></span></code></pre></div><p>这样我们就完成了更新配置文件的操作。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>SparkBridge并未附带json5，请开发者自行打包进插件</p></div><h2 id="网页配置面板" tabindex="-1">网页配置面板 <a class="header-anchor" href="#网页配置面板" aria-label="Permalink to &quot;网页配置面板&quot;">​</a></h2><p>在SparkBride 2.4.0时引入了<code>telemetry</code>插件，此插件可以生成网页面板来编辑配置文件，大幅度降低文件修改的难度</p>`,21),t=[l];function p(h,k,d,r,o,c){return a(),i("div",null,t)}const F=s(e,[["render",p]]);export{g as __pageData,F as default};
